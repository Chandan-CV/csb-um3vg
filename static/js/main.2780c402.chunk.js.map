{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","onClick","active","isRed","Card","className","CardContent","Typography","color","sortData","data","sortedData","sort","a","b","casesTypeColors","multiplier","option","fillColor","recovered","deaths","ShowDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","radius","Math","sqrt","Popup","src","flag","numeral","format","Map","countries","zoom","useState","setmap","flyTo","id","MapContainer","whenCreated","maxZoom","TileLayer","attribution","url","Table","Intl","NumberFormat","LineGraph","casestype","setData","refresh","setRefresh","buildChartData","lastPoint","x","y","date","push","useEffect","fetch","then","response","json","lol","chartData","console","log","fetchData","labels","datasets","label","backgroundColor","borderColor","options","maintainAspectRatio","tooltips","mode","intersect","callbacks","tooltipItem","value","scales","xAxes","gridLines","display","type","time","tooltipFormat","yAxes","ticks","callback","index","values","App","setCountries","setCountry","tableData","setTableData","setCountryInfo","mapCenter","setMapCenter","mapZoom","setmapZoom","mapCountries","setMapCountries","setCasesType","con","name","iso2","SortedData","getCountriesData","onCountryChange","event","countrycode","target","dat","prettyShow","number","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2780c402.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\nimport React from 'react'\nimport './infobox.css'\n\nfunction InfoBox({title,cases,total,onClick,active,isRed}) {\n    return (\n        <Card onClick={onClick}\n         className= {`infoCard ${active && \"infobox--selected\"}  ${isRed && \"infobox--red\"}`}  >\n                <CardContent>\n                {/* TITLE coronavirus cases */}\n                <Typography color=\"textSecondary\">\n                {title}\n                </Typography>\n                                \n                {/* number of cases  per day */}\n                <h2>{cases} </h2>\n\n                \n                {/* total */}\n                <Typography color=\"textSecondary\">\n                {total} total\n                </Typography>\n                \n                </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import { Popup,Circle } from 'react-leaflet'\nimport numeral from \"numeral\"\nimport \"./util.css\"\nexport const sortData = (data)=>{\n    const sortedData =[...data];\n    sortedData.sort((a,b)=> a.cases>b.cases? -1:1)\n    return sortedData;\n}\n\nconst casesTypeColors = {\n    cases: {\n      multiplier: 800,\n      option: { color:\"#cc1034\", fillColor: \"#cc1034\" },\n    },\n    recovered: {\n      multiplier: 1200,\n      option: { color:\"#7dd71d\", fillColor: \"#7dd71d\" },\n    },\n    deaths: {\n      multiplier: 2000,\n      option: { color:\"#ff6c47\", fillColor: \"#ff6c47\" }\n    },\n  };\nexport const ShowDataOnMap =(data, casesType =\"cases\")=>\ndata.map(country=>(\n    <Circle\n    center={[country.countryInfo.lat, country.countryInfo.long]}\n    fillOpacity={0.4}\n    pathOptions={casesTypeColors[casesType].option}\n    radius={\n      Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n    }\n  >\n<Popup  >\n<div className=\"info-container\">\n\n<img \nsrc= {country.countryInfo.flag}\nclassName=\"flag123\"\n/>\n  \n<div className=\"info-name\">{country.country}</div>\n  \n  <div className=\"info-confirmed\">\n    Cases: {numeral(country.cases).format(\"0,0\")}\n  </div>\n \n  <div className=\"info-recovered\">\n    Recovered: {numeral(country.recovered).format(\"0,0\")}\n  </div>\n \n  <div className=\"info-deaths\">\n    Deaths: {numeral(country.deaths).format(\"0,0\")}\n  </div>\n</div>\n</Popup>\n</Circle>\n   )) \n\n\n\n\n","\nimport React, { useEffect, useState } from 'react'\nimport \"./Map.css\"\nimport {MapContainer, TileLayer, Popup,Circle } from 'react-leaflet'\nimport { ShowDataOnMap } from './util';\n\n\n\n\n\n\n\nfunction Map({countries,center,zoom ,casesType}) {\n\n\n\n  const[map,setmap]=useState(null);\n  \n    if(map)\n    {\n      map.flyTo(center);\n     }\n  return (\n     \n      <div>\n      <div className=\"map\" id=\"map\">\n      <MapContainer  center={center} zoom={zoom} whenCreated={setmap} maxZoom={8}  >\n      \n      <TileLayer\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n       />\n    {(countries)?ShowDataOnMap(countries,casesType):null}\n    \n    \n       </MapContainer>\n      </div>\n      \n      </div>\n     \n    \n      \n      \n      )\n    }\n\nexport default Map\n\n\n\n\n\n","import React from 'react'\nimport './Table.css'\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n       {\n           countries.map((country)=>(\n              <tr>\n              <td>{country.country}</td>\n              <td ><strong>{Intl.NumberFormat('en').format(country.cases)}</strong></td>\n                    \n              </tr> \n           ))\n       }\n      </div>\n    )\n}\n\nexport default Table\n","import React, { useEffect, useState } from 'react'\nimport { Line } from 'react-chartjs-2'\n import numeral from 'numeral'\n\n\nfunction LineGraph({casestype}) {\n const [data, setData] = useState({});\n//https://disease.sh/v3/covid-19/historical/all?lastdays=120  \nconst [refresh,setRefresh]= useState();\n\n\nconst buildChartData=(data)=>{\n    const x=[];\n    const y=[];\n    let lastPoint;\n   for (let date in data[casestype]) {\n        if(lastPoint){\n          if((data[casestype][date]-lastPoint)>0 )  \n         { x.push(date)\n          y.push(data[casestype][date]-lastPoint)\n         }  \n          \n        }\n        lastPoint= data[casestype][date]\n\n    };\n\n    return {x,y}\n    \n}\n\n\n\n\n\nuseEffect(()=>{\n    const fetchData =async()=>{\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then(response=>response.json())\n        .then(lol=>{\n            const chartData = buildChartData(lol);\n            setData(chartData);\n            console.log(data)\n        })\n    }\n    fetchData();\n    setRefresh(casestype);\n},[])   \n\nconst rebuild = ()=>{\n    const fetchData =async()=>{\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then(response=>response.json())\n        .then(lol=>{\n            const chartData = buildChartData(lol);\n            setData(chartData);\n            console.log(data)\n        })\n    }\n    fetchData();\n    setRefresh(casestype);\n\n}\n\nreturn (\n        <div>\n        {refresh!==casestype?rebuild() :null}\n     \n            { data?\n            \n                <Line\n                data={{\n                    labels: data.x,\n                    datasets: [{\n                        \n                        label: 'new cases',\n                        backgroundColor: 'rgb(255, 139, 139)',\n                        borderColor: 'red',\n                        data: data.y\n                    }]\n                }}\n                \n                options={{\n                  \n                    \n                    maintainAspectRatio:true,  \n                    tooltips:{\n                        mode:\"index\",\n                        intersect:false,\n                        callbacks:{\n                            label: function (tooltipItem,data){\n                                return numeral(tooltipItem.value).format(\"+0.0\");\n                            },\n                        },\n                    },\n                    scales:{\n                        xAxes:[\n                            { \n                                gridLines:{\n                                    display:false\n                                },\n                                type:\"time\",\n                                time:{\n                                    format:\"MM/DD/YY\",\n                                    tooltipFormat:\"ll\"\n                                }\n                                \n                            }\n                        ],\n                        yAxes:[\n                            {\n                                gridLines:{\n                                    display:false\n                                },\n                                ticks:{\n                                    callback: function(value,index,values)\n                                    {\n                                        return numeral(value).format(\"0a\")\n                                    }\n                                }\n                            }\n                        ]\n                    },\n                    \n                    \n        \n                }}\n                />\n                :<h1>loading the graph</h1>\n            }\n                </div>\n                )\n            }\n\n            export default LineGraph\n            ","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [tableData, setTableData] = useState([]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [mapCenter, setMapCenter] = useState([20, 77]);\n  const [mapZoom, setmapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState();\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const con = data.map((country) => ({\n            name: country.country,\n            id: country.countryInfo.iso2,\n            flag: country.countryInfo.flag,\n          }));\n          const SortedData = sortData(data);\n          setTableData(SortedData);\n          setMapCountries(data);\n          setCountries(con);\n        });\n\n      await fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then((response) => response.json())\n        .then((data) => {\n          setCountryInfo(data);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countrycode = event.target.value;\n\n    const url =\n      countrycode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countrycode}`;\n\n    await fetch(url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((dat) => {\n        setCountry(countrycode);\n        setCountryInfo(dat);\n        if (countrycode !== \"worldwide\") {\n          setMapCenter([dat.countryInfo.lat, dat.countryInfo.long]);\n          setmapZoom(4);\n        }\n      });\n\n    //https://disease.sh/v3/covid-19/all\n    //https://disease.sh/v3/covid-19/countries/[CountryCode]\n  };\n\n  const formatter = new Intl.NumberFormat(\"en\");\n  const prettyShow = (number) => {\n  return `+${numeral(number).format(\"0.0a\")}`\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"appLeft\">\n        <div className=\"header\">\n          <h1>Covid 19 Tracker</h1>\n          <FormControl>\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n              className=\"form\"\n            >\n              <MenuItem value=\"worldwide\">worldwide</MenuItem>\n              {countries.map((country) => {\n                return (\n                  <MenuItem value={country.id}>\n                    <div className=\"countryOptions\">\n                      {country.name}\n                      <img src={country.flag} className=\"flag\" />{\" \"}\n                    </div>\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"cardsDiv\">\n          <InfoBox\n          isRed={true}\n          active={casesType===\"cases\"}\n            title=\"Active Cases\"\n            total={prettyShow(countryInfo.cases)}\n            cases={prettyShow(countryInfo.todayCases)}\n            onClick={() => {\n              setCasesType(\"cases\");\n            }}\n            \n          />\n          <InfoBox\n          active={casesType===\"recovered\"}\n            title=\"Recovered Cases\"\n            total={prettyShow(countryInfo.recovered)}\n            cases={prettyShow(countryInfo.todayRecovered)}\n            onClick={() => {\n              setCasesType(\"recovered\");\n            }}\n            \n          />\n          <InfoBox\n          isRed={true}\n          active={casesType===\"deaths\"}\n            title=\"Deaths\"\n            total={prettyShow(countryInfo.deaths)}\n            cases={prettyShow(countryInfo.todayDeaths)}\n            onClick={() => {\n              setCasesType(\"deaths\");\n            }}\n          \n          />\n        </div>\n\n        {/* table */}\n        {/* graph */}\n\n        {/* Map */}\n\n        <div>\n          <Map\n            center={mapCenter}\n            zoom={mapZoom}\n            countries={mapCountries}\n            casesType={casesType}\n          />\n        </div>\n      </div>\n      <Card className=\"appRight\">\n        <h3><strong> Live cases by country</strong></h3>\n        <Table countries={tableData} />\n        <h3>Worldwide new {casesType}</h3>\n        <LineGraph casestype={casesType} />\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}